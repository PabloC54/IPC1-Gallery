/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Estructuras.ColadeProcesamiento;
import Estructuras.ListaImagenes;
import Estructuras.PiladeProcesamiento;
import static Main.Main.Vpri;
import Handlers.BMPtoJPEGImage;
import Handlers.JPEGImageCopy;
import Handlers.JPEGImageHandlerBN;
import Handlers.JPEGImageHandlerColors;
import Handlers.JPEGImageHandlerRotator;
import Handlers.JPEGtoBMPImage;
import Handlers.JPEGHandler;
import Hilos.HiloActualizar;
import Hilos.HiloHandlerCola;
import Hilos.HiloHandlerPila;
import Hilos.HiloProceso;
import static Ventanas.Principal.listausuarios;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JScrollBar;

/**
 *
 * @author pablo
 */
public class Conversor extends javax.swing.JFrame {

    public ListaImagenes listaimagenes;
    public static DefaultListModel listanombres = new DefaultListModel();
    public ButtonGroup buttonGroup1 = new ButtonGroup();
    public static JScrollBar vertical;
    public static JScrollBar vertical2;

    public static PiladeProcesamiento piladearchivos;
    public static ColadeProcesamiento coladearchivos;

    public File archivo;
    public File[] archivos;

    public boolean imagenesseleccionadas = false;
    public static boolean bmp;
    public static boolean barrahabilitada = true;
    public static int count = 1;
    public static int progreso = 1;
    public static int pos;
    public static int total;
    
    public static boolean threadfinalizado=true;

    /**
     * Creates new form Conversor
     */
    public Conversor() {
        initComponents();
        setLocationRelativeTo(null);
        jList1.setModel(listanombres);

        vertical = jScrollPane2.getVerticalScrollBar();
        vertical2 = jScrollPane1.getVerticalScrollBar();

        for (int i = 0; i < listausuarios.getSize(); i++) {
            jComboBox1.addItem(listausuarios.getNombre(i));
        }

        jTextArea1.append("----------------------------------------------------------------------------------------------------------------------");

    }

    public void actualizar(int op) {

        progreso += 100 / total;
        //Lista de procesos
        jList1.setSelectedIndex(listanombres.getSize() - 1);
        jList1.repaint();

        //Consola
        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
        jTextArea1.repaint();

        //Barra de progreso
        jProgressBar1.setValue(progreso);
        jProgressBar1.repaint();

        //Barras deslizables
        vertical.addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                if (barrahabilitada = false) {
                    e.getAdjustable().setValue(e.getAdjustable().getMaximum());
                }
            }
        });

        vertical2.addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                if (barrahabilitada = false) {
                    e.getAdjustable().setValue(e.getAdjustable().getMaximum());
                }
            }
        });

        if (op == 1) {
            //pila de archivos     
            pos = count - 1;
            listanombres.removeElement(pos + ") " + piladearchivos.getArchivo().getName());
            piladearchivos.pop();
            count--;
        }
        if (op == 2) {
            //cola de archivos
            listanombres.removeElement(pos + ") " + coladearchivos.getArchivo().getName());
            coladearchivos.pop();
            pos++;
            count--;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);

        jScrollPane1.setViewportView(jList1);

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setBorder(null);

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setBorder(null);

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setBorder(null);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setBorder(null);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setBorder(null);

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText(" JPEG a BMP y Viceversa");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText(" Copia JPEG");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText(" Rojo Verde Azul Sepia");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText(" Modificar Imagen");
        jLabel7.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText(" Blanco y Negro");
        jLabel8.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jButton1.setText("Ejecutar en paralelo");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jButton2.setText("Ejecutar en secuencia LIFO");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jButton3.setText("Ejecutar en secuencia FIFO");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);

        jLabel10.setText("Cantidad procesada");

        jLabel11.setText("Consola de ejecución");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setAutoscrolls(true);

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Corbel Light", 0, 12)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(102, 255, 102));
        jTextArea1.setRows(5);
        jTextArea1.setAutoscrolls(false);
        jTextArea1.setCaretColor(new java.awt.Color(255, 255, 255));
        jTextArea1.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        jTextArea1.setEnabled(false);
        jTextArea1.setSelectedTextColor(new java.awt.Color(51, 51, 51));
        jScrollPane2.setViewportView(jTextArea1);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setText("Conversor");

        jLabel1.setText("Usuario:");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Categoría:");

        jToggleButton1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jToggleButton1.setText("Agregar");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Cola de procesamiento");

        jButton4.setText("Salir");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(22, 22, 22))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)))
                        .addGap(100, 100, 100))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jScrollPane2))
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(59, 59, 59)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jRadioButton2)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(jRadioButton3)
                                                            .addComponent(jRadioButton4)
                                                            .addComponent(jRadioButton5))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jRadioButton1)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(232, 232, 232)
                                                .addComponent(jLabel10))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(228, 228, 228)
                                                .addComponent(jLabel11)))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(20, 20, 20))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel9)
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1))
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(jButton2))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel6))))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jRadioButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel8))
                                    .addComponent(jRadioButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jButton1)
                                .addGap(69, 69, 69)
                                .addComponent(jButton3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // AL PRESIONAL OPCION 1
        jRadioButton1.setSelected(true);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // AL PRESIONAL LABEL 2
        jRadioButton2.setSelected(true);
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // AL PRESIONAL LABEL 3
        jRadioButton3.setSelected(true);
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // AL PRESIONAL LABEL 4
        jRadioButton4.setSelected(true);
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // AL PRESIONAL LABEL 5
        jRadioButton5.setSelected(true);
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // SELECCIONAR COMBOBOX DE USUARIOS        
        jComboBox2.removeAllItems();

        for (int i = 0; i < listausuarios.getListaCategorias(jComboBox1.getSelectedIndex()).getSize(); i++) {
            jComboBox2.addItem(listausuarios.getListaCategorias(jComboBox1.getSelectedIndex()).getNombre(i));
        }

        jComboBox2.setSelectedIndex(-1);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // SELECCIONAR COMBOBOX DE CATEGORIAS
        imagenesseleccionadas = true;
        listanombres.removeAllElements();
        count = 1;

        listaimagenes = listausuarios.getListaCategorias(jComboBox1.getSelectedIndex()).getListaImagenes(jComboBox2.getSelectedIndex());

        archivos = new File[listaimagenes.getSize()];
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // BOTON AGREGAR

        listanombres.removeAllElements();
        if (listaimagenes.getSize() > 0) {
            for (int i = 0; i < listaimagenes.getSize(); i++) {
                listanombres.addElement(count + ") " + listaimagenes.getImagen(i).getName());
                archivos[i] = listaimagenes.getImagen(i);
                count++;
            }

            jList1.setSelectedIndex(listanombres.getSize() - 1);
            vertical2.setValue(vertical2.getMaximum());
            vertical.setValue(vertical.getMaximum());

            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);

        } else {
            listanombres.addElement("-Sin imágenes-");
        }


    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // BOTON SALIR
        this.setVisible(false);
        Vpri.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // EJECUTAR EN PARALELO     ---     HILOS    

        if (jRadioButton1.isSelected() || jRadioButton2.isSelected() || jRadioButton3.isSelected() || jRadioButton4.isSelected() || jRadioButton5.isSelected()) {
            if (imagenesseleccionadas == true) {
                imagenesseleccionadas = false;
                barrahabilitada = false;
                jProgressBar1.setValue(0);

                jTextArea1.append("\n\nTrabajando " + listaimagenes.getSize() + " imágenes con una cola de procesamiento\n");

                total = listaimagenes.getSize();
                progreso = 0;
                pos = 1;

                piladearchivos = new PiladeProcesamiento();   // Crea una cola

                for (int i = 0; i < listaimagenes.getSize(); i++) {
                    piladearchivos.push(listaimagenes.getImagen(i));   // Llena la cola
                }

                if (jRadioButton1.isSelected()) { // JPEG A BMP Y VICEVERSA 

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  
                        HiloHandlerPila hilo = new HiloHandlerPila(i, 1);
                        hilo.start();
                        count--;
                    }

                }

                if (jRadioButton2.isSelected()) { // COPIA JPEG

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  
                        HiloProceso hilo = new HiloProceso(i, 2);
                        hilo.start();
                        count--;
                    }

                }

                if (jRadioButton3.isSelected()) { // ROJO, VERDE, AZUL, SEPIA

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  
                        HiloProceso hilo = new HiloProceso(i, 3);
                        hilo.start();
                        count--;
                    }

                }

                if (jRadioButton4.isSelected()) { // MODIFICAR IMAGEN

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  
                        HiloProceso hilo = new HiloProceso(i, 4);
                        hilo.start();
                        count--;
                    }

                }

                if (jRadioButton5.isSelected()) { // BLANCO Y NEGRO

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  
                        HiloProceso hilo = new HiloProceso(i, 5);
                        hilo.start();
                        count--;
                    }

                }

                jProgressBar1.setValue(100);
                jProgressBar1.setString("Proceso Completado");
                vertical.setValue(vertical.getMaximum());
                jTextArea1.append("\n\n-------------------------------------------------------------------------------------------------------------------------");
                barrahabilitada = true;

                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // EJECUTAR EN SECUENCIA LIFO    --     PILA

        if (jRadioButton1.isSelected() || jRadioButton2.isSelected() || jRadioButton3.isSelected() || jRadioButton4.isSelected() || jRadioButton5.isSelected()) {
            if (imagenesseleccionadas == true) {
                imagenesseleccionadas = false;
                barrahabilitada = false;
                jProgressBar1.setValue(0);

                jTextArea1.append("\n\nTrabajando " + listaimagenes.getSize() + " imágenes con una pila de procesamiento\n");

                total = listaimagenes.getSize();
                progreso = 0;

                piladearchivos = new PiladeProcesamiento();   // Crea una pila

                for (int i = 0; i < listaimagenes.getSize(); i++) {
                    piladearchivos.push(listaimagenes.getImagen(i));   // Llena la pila
                }

                JPEGHandler handler;
                if (jRadioButton1.isSelected()) { // JPEG A BMP Y VICEVERSA 

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            if (coladearchivos.getArchivo().getName().endsWith(".bmp") || coladearchivos.getArchivo().getName().endsWith(".BMP")) {
                                bmp = true;
                            }

                            if (bmp == true) {
                                jTextArea1.append("\n--> Convirtiendo " + coladearchivos.getArchivo().getName() + " a JPEG");
                                handler = new JPEGHandler(new BMPtoJPEGImage(coladearchivos.getArchivo()));
                                jTextArea1.append("        Convertido!");

                                bmp = false;
                            } else {
                                jTextArea1.append("\n--> Convirtiendo " + coladearchivos.getArchivo().getName() + " a BMP");
                                handler = new JPEGHandler(new JPEGtoBMPImage(coladearchivos.getArchivo()));
                                jTextArea1.append("        Convertido!");
                            }

                        } catch (Exception ex) {
                            jTextArea1.append("  --No se encontró el archivo--");
                        }

                        actualizar(2);

                    }

                }

                if (jRadioButton2.isSelected()) { // COPIA JPEG

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            jTextArea1.append("\n--> Copiando " + piladearchivos.getArchivo().getName());
                            if (piladearchivos.getArchivo().getName().endsWith(".jpg")) {
                                handler = new JPEGHandler(new JPEGImageCopy(piladearchivos.getArchivo()));
                                jTextArea1.append("      Copiado!");
                            } else {
                                jTextArea1.append("    --No es un archivo JPEG--");
                            }

                        } catch (Exception ex) {
                            jTextArea1.append("    --No se encontró el archivo--");
                        }

                        actualizar(1);

                    }

                }

                if (jRadioButton3.isSelected()) { // ROJO, VERDE, AZUL, SEPIA

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            jTextArea1.append("\n--> Generando las imágenes: rojo, azul, verde y sepia de " + piladearchivos.getArchivo().getName());
                            handler = new JPEGHandler(new JPEGImageHandlerColors(piladearchivos.getArchivo()));
                            jTextArea1.append("      Generadas!");
                        } catch (Exception ex) {
                            jTextArea1.append("    --No se encontró el archivo--");
                        }

                        actualizar(1);

                    }

                }

                if (jRadioButton4.isSelected()) { // MODIFICAR IMAGEN

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            jTextArea1.append("\n--> Generando las imágenes: espejo-h y espejo-v de " + piladearchivos.getArchivo().getName());
                            handler = new JPEGHandler(new JPEGImageHandlerRotator(piladearchivos.getArchivo()));
                            jTextArea1.append("      Generadas!");
                        } catch (Exception ex) {
                            jTextArea1.append("    --No se encontró el archivo--");
                        }

                        actualizar(1);

                    }

                }

                if (jRadioButton5.isSelected()) { // BLANCO Y NEGRO

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            jTextArea1.append("\n--> Generando una imagen blanco y negro de " + piladearchivos.getArchivo().getName());
                            handler = new JPEGHandler(new JPEGImageHandlerBN(piladearchivos.getArchivo()));
                            jTextArea1.append("      Generada!");
                        } catch (Exception ex) {
                            jTextArea1.append("    --No se encontró el archivo--");
                        }

                        actualizar(1);

                    }

                }

                jProgressBar1.setValue(100);
                jProgressBar1.setString("Proceso Completado");
                vertical.setValue(vertical.getMaximum());
                jTextArea1.append("\n\n-------------------------------------------------------------------------------------------------------------------------");
                barrahabilitada = true;

                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
                System.out.println("count final: " + count);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // EJECUTAR EN SECUENCIA FIFO     --     COLA

        if (jRadioButton1.isSelected() || jRadioButton2.isSelected() || jRadioButton3.isSelected() || jRadioButton4.isSelected() || jRadioButton5.isSelected()) {
            if (imagenesseleccionadas == true) {
                imagenesseleccionadas = false;
                barrahabilitada = false;
                jProgressBar1.setValue(0);

                jTextArea1.append("\n\nTrabajando " + listaimagenes.getSize() + " imágenes con una cola de procesamiento\n");

                total = listaimagenes.getSize();
                progreso = 0;
                pos = 1;

                coladearchivos = new ColadeProcesamiento();   // Crea una cola

                for (int i = 0; i < listaimagenes.getSize(); i++) {
                    coladearchivos.push(listaimagenes.getImagen(i));   // Llena la cola
                }

                JPEGHandler handler;
                if (jRadioButton1.isSelected()) { // JPEG A BMP Y VICEVERSA 

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            if (coladearchivos.getArchivo().getName().endsWith(".bmp") || coladearchivos.getArchivo().getName().endsWith(".BMP")) {
                                bmp = true;
                            }

                            if (bmp == true) {
                                jTextArea1.append("\n--> Convirtiendo " + coladearchivos.getArchivo().getName() + " a JPEG");
                                handler = new JPEGHandler(new BMPtoJPEGImage(coladearchivos.getArchivo()));
                                jTextArea1.append("        Convertido!");

                                bmp = false;
                            } else {
                                jTextArea1.append("\n--> Convirtiendo " + coladearchivos.getArchivo().getName() + " a BMP");
                                handler = new JPEGHandler(new JPEGtoBMPImage(coladearchivos.getArchivo()));
                                jTextArea1.append("        Convertido!");
                            }

                        } catch (Exception ex) {
                            jTextArea1.append("  --No se encontró el archivo--");
                        }

                        actualizar(2);

                    }

                }

                if (jRadioButton2.isSelected()) { // COPIA JPEG

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            jTextArea1.append("\n--> Copiando " + coladearchivos.getArchivo().getName());
                            if (coladearchivos.getArchivo().getName().endsWith(".jpg")) {
                                handler = new JPEGHandler(new JPEGImageCopy(coladearchivos.getArchivo()));
                                jTextArea1.append("      Copiado!");
                            } else {
                                jTextArea1.append("    --No es un archivo JPEG--");
                            }

                        } catch (Exception ex) {
                            jTextArea1.append("    --No se encontró el archivo--");
                        }

                        actualizar(2);

                    }

                }

                if (jRadioButton3.isSelected()) { // ROJO, VERDE, AZUL, SEPIA

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            jTextArea1.append("\n--> Generando las imágenes: rojo, azul, verde y sepia de " + coladearchivos.getArchivo().getName());
                            handler = new JPEGHandler(new JPEGImageHandlerColors(coladearchivos.getArchivo()));
                            jTextArea1.append("      Generadas!");
                        } catch (Exception ex) {
                            jTextArea1.append("    --No se encontró el archivo--");
                        }

                        actualizar(2);

                    }

                }

                if (jRadioButton4.isSelected()) { // MODIFICAR IMAGEN

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            jTextArea1.append("\n--> Generando las imágenes: espejo-h y espejo-v de " + coladearchivos.getArchivo().getName());
                            handler = new JPEGHandler(new JPEGImageHandlerRotator(coladearchivos.getArchivo()));
                            jTextArea1.append("      Generadas!");
                        } catch (Exception ex) {
                            jTextArea1.append("    --No se encontró el archivo--");
                        }

                        actualizar(2);

                    }

                }

                if (jRadioButton5.isSelected()) { // BLANCO Y NEGRO

                    for (int i = 0; i < listaimagenes.getSize(); i++) {                // Aplica el proceso a cada archivo de la cola  

                        try {
                            jTextArea1.append("\n--> Generando una imagen blanco y negro de " + coladearchivos.getArchivo().getName());
                            handler = new JPEGHandler(new JPEGImageHandlerBN(coladearchivos.getArchivo()));
                            jTextArea1.append("      Generada!");
                        } catch (Exception ex) {
                            jTextArea1.append("    --No se encontró el archivo--");
                        }

                        actualizar(2);

                    }

                }

                jProgressBar1.setValue(100);
                jProgressBar1.setString("Proceso Completado");
                vertical.setValue(vertical.getMaximum());
                jTextArea1.append("\n\n-------------------------------------------------------------------------------------------------------------------------");
                barrahabilitada = true;

                jButton1.setEnabled(false);
                jButton2.setEnabled(false);
                jButton3.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Conversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Conversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Conversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Conversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Conversor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
